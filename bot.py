import os
import logging
import asyncio

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InputFile, Update
from aiogram.webhook.kp import get_new_configured_app  # –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π aiohttp-—Å–µ—Ä–≤–µ—Ä
from yt_dlp import YoutubeDL

logging.basicConfig(level=logging.INFO)

# 1. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä, https://<your-service>.onrender.com
PORT = int(os.getenv("PORT", 8000))

if not BOT_TOKEN or not WEBHOOK_URL:
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ WEBHOOK_URL!")
    exit(1)

# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ yt-dlp
YDL_OPTS = {
    "format": "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best",
    "outtmpl": "downloads/%(title).30s.%(ext)s",
    "noplaylist": True,
    "quiet": True,
}

os.makedirs("downloads", exist_ok=True)

# 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply(
        "üëã –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (YouTube, TikTok, Instagram, Pinterest).\n"
        "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 50 –ú–ë. –ï—Å–ª–∏ –±–æ–ª—å—à–µ ‚Äî –≤–µ—Ä–Ω—É —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª."
    )

@dp.message()
async def download_handler(message: Message):
    url = message.text.strip()
    if not url.startswith("http"):
        return await message.reply("‚ùó –ù—É–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!")

    loading = await message.reply("‚è≥ –°–∫–∞—á–∏–≤–∞—é, –ø–æ–¥–æ–∂–¥–∏‚Ä¶")
    try:
        with YoutubeDL(YDL_OPTS) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info)

        size = os.path.getsize(filename)
        if size <= 50 * 1024 * 1024:
            video = InputFile(path_or_bytesio=filename)
            await message.reply_video(video)
        else:
            await message.reply(
                f"‚úÖ –°–∫–∞—á–∞–Ω–æ ({size//1024**2} –ú–ë), –Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è Telegram.\n"
                f"–°–∫–∞—á–∞—Ç—å: `{WEBHOOK_URL}/files/{os.path.basename(filename)}`",
                parse_mode="Markdown"
            )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if 'filename' in locals() and os.path.exists(filename):
            os.remove(filename)

async def on_startup():
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º webhook –≤ Telegram
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown():
    # —Å–Ω–∏–º–∞–µ–º webhook
    await bot.delete_webhook()
    await bot.session.close()

# 4. –°–æ–∑–¥–∞—ë–º aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –º–æ–Ω—Ç–∏—Ä—É–µ–º –µ–≥–æ
app = get_new_configured_app(
    dp=dp,
    path="/",                 # –∫–æ—Ä–µ–Ω—å –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    on_startup=[on_startup],
    on_shutdown=[on_shutdown]
)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=PORT)
