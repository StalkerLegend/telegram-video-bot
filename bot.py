import os
import logging
import asyncio

from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from yt_dlp import YoutubeDL

logging.basicConfig(level=logging.INFO)

# ENV
BOT_TOKEN = os.getenv("BOT_TOKEN")
PORT      = int(os.getenv("PORT", "8000"))
DOWNLOADS = "downloads"

if not BOT_TOKEN:
    logging.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher()
os.makedirs(DOWNLOADS, exist_ok=True)

YDL_OPTS = {
    "format": "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best",
    "outtmpl": f"{DOWNLOADS}/%(title).50s.%(ext)s",
    "noplaylist": True,
    "quiet": True,
    "no_warnings": True,
    "logger": logging.getLogger("yt-dlp"),
}

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply(
        "üëã –Ø –±–æ—Ç-—Å–∫–∞—á–∞–ª–∫–∞ –≤–∏–¥–µ–æ (YouTube, TikTok, Insta, Pinterest).\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É. –ï—Å–ª–∏ –≤–∏–¥–µ–æ ‚â§50 –ú–ë ‚Äî –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª, –∏–Ω–∞—á–µ ‚Äî —Å—Å—ã–ª–∫—É."
    )

@dp.message()
async def download_handler(message: Message):
    url = message.text.strip()
    if not url.startswith("http"):
        return await message.reply("‚ùó –û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")

    status = await message.reply("‚è≥ –°–∫–∞—á–∏–≤–∞—é‚Ä¶ –ø–æ–¥–æ–∂–¥–∏ –º–∏–Ω—É—Ç–∫—É")
    filename = None

    try:
        # heavy work in thread
        def yt_download():
            with YoutubeDL(YDL_OPTS) as ydl:
                info = ydl.extract_info(url, download=True)
                return ydl.prepare_filename(info)

        filename = await asyncio.to_thread(yt_download)
        size = os.path.getsize(filename)
        logging.info(f"Downloaded {filename}, size={size}")

        if size <= 50 * 1024 * 1024:
            await message.reply_video(FSInputFile(filename))
        else:
            public = f"https://{os.getenv('RENDER_SERVICE_NAME')}.onrender.com/{os.path.basename(filename)}"
            await message.reply(
                f"‚úÖ –°–∫–∞—á–∞–Ω–æ ({size//1024**2} –ú–ë), —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª.\n"
                f"–°–∫–∞—á–∞—Ç—å —Ç—É—Ç:\n{public}"
            )
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞:\n`{e}`", parse_mode="Markdown")
    finally:
        await status.delete()
        if filename and os.path.exists(filename):
            os.remove(filename)

async def start_polling():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    # 1) aiohttp –¥–ª—è Render
    app = web.Application()
    # –ø—Ä–æ—Å—Ç–æ–π health-check
    async def ping(request): return web.Response(text="OK")
    app.add_routes([web.get("/", ping)])
    # –æ—Ç–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏
    app.router.add_static("/", DOWNLOADS, show_index=True)

    # 2) –ó–∞–ø—É—Å–∫–∞–µ–º polling –∏ HTTP-—Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    loop = asyncio.get_event_loop()
    loop.create_task(start_polling())
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ HTTP –Ω–∞ –ø–æ—Ä—Ç—É {PORT} –∏ polling")
    web.run_app(app, host="0.0.0.0", port=PORT)
