import os
import logging
import asyncio

from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from yt_dlp import YoutubeDL

logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN   = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT        = int(os.getenv("PORT", 8443))
DOWNLOADS   = "downloads"

if not BOT_TOKEN or not WEBHOOK_URL:
    logging.error("‚ùå –ó–∞–¥–∞–π—Ç–µ BOT_TOKEN –∏ WEBHOOK_URL!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher()
os.makedirs(DOWNLOADS, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp –±–µ–∑ –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
YDL_OPTS = {
    "format": "bestvideo+ bestaudio/best",
    "outtmpl": f"{DOWNLOADS}/%(title).50s.%(ext)s",
    "noplaylist": True,
    "quiet": True,
    "no_warnings": True,
    "logger": logging.getLogger("yt-dlp"),
}

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply(
        "üëã –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ YouTube, TikTok, Instagram –∏ Pinterest.\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É, –∏ —è –ø—Ä–∏—à–ª—é –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª (–¥–æ 50 –ú–ë) –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ."
    )

@dp.message()
async def download_handler(message: Message):
    url = message.text.strip()
    if not url.startswith("http"):
        return await message.reply("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É!")

    status_msg = await message.reply("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ‚Ä¶ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")

    filename = None
    try:
        # –í—ã–Ω–µ—Å–µ–º —Ç—è–∂—ë–ª—É—é —Ä–∞–±–æ—Ç—É –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
        def download():
            with YoutubeDL(YDL_OPTS) as ydl:
                info = ydl.extract_info(url, download=True)
                return ydl.prepare_filename(info)

        filename = await asyncio.to_thread(download)
        size = os.path.getsize(filename)
        logging.info(f"Downloaded {filename}, size={size} bytes")

        if size <= 50 * 1024 * 1024:
            video = FSInputFile(filename)
            await message.reply_video(video)
        else:
            base = WEBHOOK_URL.rsplit("/webhook", 1)[0]
            public = f"{base}/{os.path.basename(filename)}"
            await message.reply(
                f"‚úÖ –í–∏–¥–µ–æ ({size//1024**2} –ú–ë) —Å–∫–∞—á–∞–Ω–æ, –Ω–æ Telegram –Ω–µ –ø—Ä–∏–º–µ—Ç —Ç–∞–∫–æ–π –æ–±—ä—ë–º.\n"
                f"–°–∫–∞—á–∞—Ç—å –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\n{public}"
            )

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ")
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ:\n`{e}`", parse_mode="Markdown")
    finally:
        # —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        if filename and os.path.exists(filename):
            try: os.remove(filename)
            except: pass
        # —É–¥–∞–ª—è–µ–º ¬´–°–∫–∞—á–∏–≤–∞—é‚Ä¶¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_msg.delete()

async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown():
    await bot.delete_webhook()
    await bot.session.close()

if __name__ == "__main__":
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    app.on_startup.append(lambda _: asyncio.create_task(on_startup()))
    app.on_shutdown.append(lambda _: asyncio.create_task(on_shutdown()))
    app.router.add_static("/", DOWNLOADS, show_index=True)

    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
    web.run_app(app, host="0.0.0.0", port=PORT)
