import os
import logging
import asyncio

from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InputFile
from yt_dlp import YoutubeDL

# 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")
    exit(1)

# 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# 4. –û–±—â–∏–µ –æ–ø—Ü–∏–∏ –¥–ª—è yt-dlp
YDL_OPTS = {
    "format": "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best",
    "outtmpl": "downloads/%(title).50s.%(ext)s",
    "noplaylist": True,
    "quiet": True,
}

# –°–æ–∑–¥–∞–¥–∏–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs("downloads", exist_ok=True)

@dp.message(Command(commands=["start", "help"]))
async def cmd_start(message: Message):
    await message.reply(
        "üëã –Ø –±–æ—Ç, –º–æ–≥—É —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ YouTube, TikTok, Instagram –∏ Pinterest.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –≤–µ—Ä–Ω—É —Ñ–∞–π–ª.\n\n"
        "‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞: **–¥–æ 50 –ú–ë** (Telegram API).\n"
        "–ï—Å–ª–∏ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ ‚Äî –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª."
    )

@dp.message()
async def download_video(message: Message):
    url = message.text.strip()
    if not url.startswith("http"):
        return await message.reply("‚ùó –ù—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞, –Ω–∞—á–∏–Ω–∞—é—â–∞—è—Å—è —Å http:// –∏–ª–∏ https://")

    info = await message.reply("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")
    try:
        with YoutubeDL(YDL_OPTS) as ydl:
            data = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(data)

        size = os.path.getsize(filename)
        if size <= 50 * 1024 * 1024:  # ‚â§ 50 –ú–ë
            video = InputFile(path_or_bytesio=filename)
            await message.reply_video(video)
        else:
            # –µ—Å–ª–∏ –±–æ–ª—å—à–µ 50 –ú–ë, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É
            await message.reply(f"‚úÖ –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ, –Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({size//1024**2} –ú–ë).\n"
                                f"–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∑–¥–µ—Å—å:\n```\n{os.path.abspath(filename)}\n```")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ")
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n`{e}`", parse_mode="Markdown")

    # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try:
        if os.path.exists(filename):
            os.remove(filename)
    except:
        pass

async def main():
    await dp.start_polling(bot, allowed_updates=bot.resolve_used_update_types())

if __name__ == "__main__":
    asyncio.run(main())
